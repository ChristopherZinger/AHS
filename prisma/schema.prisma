generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                  String        @id @default(uuid())
  comments            Comment[]
  subcomments         Subcomment[]
  votes               Vote[]
  user                User @relation(fields: [userId], references: [id])
  userId              String @unique 
}

enum USER_ROLE {
  ADMIN
  STANDARD
}

model AnonymousSession {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  expirationDate  DateTime  
  surveys         Survey[]
  Subscriber      Subscriber[]
}

model Survey {
  id                  String            @id @default(uuid())
  createdAt           DateTime          @default(now())
  data                Json
  anonymousSession    AnonymousSession  @relation(fields: [anonymousSessionId], references: [id]) 
  anonymousSessionId  String
  isCompleted         Boolean           @default(false)
  currentStep         Int               @default(0)
}

model Subscriber {
  createdAt           DateTime          @default(now())
  email               String            @id  
  anonymousSession    AnonymousSession @relation(fields: [sessionId], references: [id])
  sessionId           String
} 

model User {
  id                  String        @id @default(uuid())
  email               String        @unique
  hashedPassword      String
  role                USER_ROLE     
  profile Profile?
}


// ENTITIES - SCHOOL or OFFICE
enum EntityType  {
  SCHOOL
  OFFICE
}

model Entity {
  id                  String        @id @default(uuid())
  slug                String        
  type                EntityType
  name                String   
  aliases             Alias[]
  isVerified          Boolean
  city                City          @relation(fields: [cityId], references: [id]) 
  cityId              String
  comments            Comment[]
  redFlagSurveys      RedFlagSurvey[]
  redFlagCounters     RedFlagCounter[]
}

model Alias {
  id                String      @id @default(uuid())
  entityType        EntityType
  name              String
  entity            Entity      @relation(fields: [entityId], references: [id]) 
  entityId          String
}

// COMMENT
model Comment {
  id                String    @id @default(uuid()) 
  author            Profile   @relation(fields: [authorId], references: [id])
  authorId          String  
  entity            Entity    @relation(fields:[entityId], references: [id])
  entityId          String 
  createdAt         DateTime  @default(now()) 
  votes             Vote[]
  content           String    @db.VarChar(4000)
  title             String    @db.VarChar(90)
  isReviewed        Boolean   @default(false) 
  subcomments       Subcomment[]
}

model Subcomment {
  id                String  @id @default(uuid())
  author            Profile   @relation(fields: [authorId], references: [id])
  authorId          String  
  content           String   @db.VarChar(1500)
  createdAt         DateTime  @default(now()) 
  parentComment     Comment    @relation(fields:[parentCommentId], references: [id])
  parentCommentId   String 
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id          String    @id @default(uuid())
  comment     Comment   @relation(fields: [commentId], references: [id])
  commentId   String
  profile     Profile   @relation(fields: [profileId], references: [id])
  profileId   String
  type        VoteType
  createdAt   DateTime  @default(now())
}

// LOCATION
model City {
    id              String      @id @default(uuid())
    isVerified      Boolean     
		name            String     
    slug            String
		countryAlpha2   String
		country         Country     @relation(fields: [countryAlpha2], references: [alpha2]) 
    offices         Entity[]
}

model Country {
  id                  String      @id @default(uuid())
	name                String  
  alpha2              String      @unique 
  cities              City[]
  region              Region      @relation(fields: [regionSlug], references: [slug])
  regionSlug          String
}

model Region  {
  slug                  String        @id
  name                  String
  countries             Country[]
}

model RedFlagCounter {
  id                String    @id @default(uuid())
  entity            Entity    @relation(fields:[entityId], references: [id])
  entityId          String 
  redFlagName       RedFlag 
  counter           Int
}

model RedFlagSurvey {
  id                  String       @id @default(uuid())
  redFlags            RedFlag[]
  entity              Entity        @relation(fields:[entityId], references: [id])
  entityId            String 
  createdAt           DateTime      @default(now()) 
}

enum RedFlag {
		// Money
		UNPAID_INTERNSHIP
	  UNPAID_OVERTIME
		STARVING_SALARY
		UNEQUAL_SALARIES
		CHANGES_IN_EMPLOYMENT_CONDITIONS
		DELAYED_PAYSLIPS
		PAYCHECK_LOWER_THEN_AGREED
		NO_SALARY_INCREASES_OR_BONUSES
		UNPAID_OR_DEDUCTED_EXPENSES
		TRASH_CONTRACTS

		// Projects - Job satisfaction
		BORING_PROJECTS
		INSIGNIFICANT_MONOTONOUS_TASKS
		TASKS_DONT_MATCH_JOB_DESCRIPTION
		CHEAPEST_SOLUTIONS_AND_BASIC_DESIGN

		// Career
		CANT_GET_MEANINGFUL_EXPERIENCE
		GLASS_CEILING
		LACK_OF_MENTORING
		NO_VARIETY_IN_RESPONSIBILITIES
		NO_PERSONAL_DEVELOPMENT_PLAN_OR_EDUCATION_BUDGET
		NOT_POSSIBLE_TO_INFLUENCE_COMPANY_STRATEGY

		// TOOLS
		MISSING_OR_STUDENTS_LICENSE
		REQUIRED_PRIVATE_HARDWARE_OR_SOFTWARE
		OFFBRAND_OR_FREE_SOFTWARE
		OLD_HARDWARE_OUTDATED_SOFTWARE
		BAD_WORKSTATION_BAD_OFFICE
		MISSING_BASIC_OFFICE_SUPPLIES

		// MANAGEMENT & BUISNESS
		MICROMANAGEMENT
		INCOMPETENT_MANAGEMENT
		INABILITY_TO_GET_PROFITABLE_ASSIGNMENTS
		FINANCIAL_PROBLEMS
		OVERLY_RELYING_ON_INTERNS_OR_FREE_LABOUR
		ILLEGAL_OR_IMMORAL

		// General vibe check
		TOXIC_ATMOSPHERE
		FAVORITISM
		ABUSE_MOBBING
		STRESS_PRESSURE
    INCOMPETENT_TEAM

		// TIME and WORKLOAD
		UNREALISTIC_DEADLINES
		SYSTEMATIC_OVERTIME
		WORK_ON_WEEKEND_AND_HOLIDAYS
		DENIED_TIME_OFF
		OVERWHELMING_RESPONSIBILITY

		// DISCRIMINATION
		ABLEISM
		AGISM
		HOMOPHOBIA
		NEPOTISM
		RACISM
		SEXISM
		TRANSPHOBIA
		XENOPHOBIA
}