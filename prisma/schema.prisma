generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                  String        @id @default(uuid())
  comments            Comment[]
  subcomments         Subcomment[]
  votes               Vote[]
  user                User @relation(fields: [userId], references: [id])
  userId              String @unique 
}

enum USER_ROLE {
  ADMIN
  STANDARD
}

model AnonymousSession {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  expirationDate  DateTime  
  surveys         Survey[]
  Subscriber      Subscriber[]
}

model Survey {
  id                  String            @id @default(uuid())
  createdAt           DateTime          @default(now())
  data                Json
  anonymousSession    AnonymousSession  @relation(fields: [anonymousSessionId], references: [id]) 
  anonymousSessionId  String
  isCompleted         Boolean           @default(false)
  currentStep         Int               @default(0)
}

model Subscriber {
  createdAt           DateTime          @default(now())
  email               String            @id  
  anonymousSession    AnonymousSession @relation(fields: [sessionId], references: [id])
  sessionId           String
} 

model User {
  id                  String        @id @default(uuid())
  email               String        @unique
  hashedPassword      String
  role                USER_ROLE     
  profile Profile?
}


// ENTITIES - SCHOOL or OFFICE
enum EntityType  {
  SCHOOL
  OFFICE
}

model Entity {
  id                  String        @id @default(uuid())
  slug                String        
  type                EntityType
  name                String   
  aliases             Alias[]
  isVerified          Boolean
  city                City          @relation(fields: [cityId], references: [id]) 
  cityId              String
  comments            Comment[]
  redFlagSurveys      RedFlagSurvey[]
  redFlagCounters     RedFlagCounter[]
}

model Alias {
  id                String      @id @default(uuid())
  entityType        EntityType
  name              String
  entity            Entity      @relation(fields: [entityId], references: [id]) 
  entityId          String
}

// COMMENT
model Comment {
  id                String    @id @default(uuid()) 
  author            Profile   @relation(fields: [authorId], references: [id])
  authorId          String  
  entity            Entity    @relation(fields:[entityId], references: [id])
  entityId          String 
  createdAt         DateTime  @default(now()) 
  votes             Vote[]
  content           String    @db.VarChar(4000)
  title             String    @db.VarChar(90)
  isReviewed        Boolean   @default(false) 
  subcomments       Subcomment[]
}

model Subcomment {
  id                String  @id @default(uuid())
  author            Profile   @relation(fields: [authorId], references: [id])
  authorId          String  
  content           String   @db.VarChar(1500)
  createdAt         DateTime  @default(now()) 
  parentComment     Comment    @relation(fields:[parentCommentId], references: [id])
  parentCommentId   String 
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id          String    @id @default(uuid())
  comment     Comment   @relation(fields: [commentId], references: [id])
  commentId   String
  profile     Profile   @relation(fields: [profileId], references: [id])
  profileId   String
  type        VoteType
  createdAt   DateTime  @default(now())
}

// LOCATION
model City {
    id              String      @id @default(uuid())
    isVerified      Boolean     
		name            String     
    slug            String
		countryAlpha2   String
		country         Country     @relation(fields: [countryAlpha2], references: [alpha2]) 
    offices         Entity[]
}

model Country {
  id                  String      @id @default(uuid())
	name                String  
  alpha2              String      @unique 
  cities              City[]
  region              Region      @relation(fields: [regionSlug], references: [slug])
  regionSlug          String
}

model Region  {
  slug                  String        @id
  name                  String
  countries             Country[]
}

model RedFlagCounter {
  id                String    @id @default(uuid())
  entity            Entity    @relation(fields:[entityId], references: [id])
  entityId          String 
  redFlagName       String 
  counter           Int
}

model RedFlagSurvey {
  id                  String       @id @default(uuid())
  redFlags            String[]
  entity              Entity        @relation(fields:[entityId], references: [id])
  entityId            String 
  createdAt           DateTime      @default(now()) 
}
